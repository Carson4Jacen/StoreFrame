1.创建版本库
 git init

2.告诉git你是谁
  git config --global user.email carsonjay@yeah.net
  git config --global user.name Carson

3.添加文件
  git add readme.txt

4.提交文件
  git commit -m "add readme.txt"

5.查看当前工作区的状态
  git status

6.查看文件内容
  cat readme.txt

7.比较文件版本不同
  git diff readme.txt

8.查看提交日志
  git log
  git log --pretty=oneline //单行显示

9.版本回退
  git reset --hard HEAD^ //退回上个版本  ^^会退到前两个版本  ^^^ 三个 类推
  git reset --hard HEAD~100 //会退到前一百个版本
  
  git reset --hard 665224 //回退到指定的commit_id 的版本. 最常用. 通过 git log 获得 commit_id

10.查看我们版本操作的记录-关掉git端之后重新打开也可找回
  git reflog //可以看到版本号也可以看到 commit 的备注信息

11.将修改添加到暂存区(git add)之后重新放回工作区
   git reset HEAD readme.txt
   
12.撤销修改
   git checkout -- readme.txt //撤销至最后一次 git add

13.删除文件
   rm test.txt

14.误删找回--删除了文件但是版本库中还有的情况下
   git checkout -- test.txt

15.正确删除文件,同步版本库
   git rm -- test.txt

16.添加远程库 -- github
   git init
   git remote add origin https://github.com/Carson4Jacen/StoreFrame.git //建立与远程库的关联
   
   //添加一个文件
   git add test.txt
   git commit -m "add a file test.txt"

   //推送到远程库
   git push -u origin master
   
   //第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来
 
   git push origin master

17.从远程库克隆
   
   git clone https://github.com/Carson4Jacen/StoreFrame.git


18.创建以及切换分支
   git branch dev //创建名为dev 的分支
   git checkout dev //切换到 dev 分支

   git checkout -b dev //创建 dev 分支并切换到 dev 分支 相当于上面两条命令


19.查看当前分支
   git branch //该命令将列出所有分支,并在当前分支加上*

20.合并分支
   git checkout master //切换到 master 分支
   git merge dev //将 dev 的提交合并到 master

21.删除分支
   git branch -d dev

   //因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全
   



	

  